O React cria um componente que é uma função que retorna, geralmente algo gráfico(código HTML);

.jsx: Forma de digitar o código mais fácil para transformar o código HTML digitado em JS, para HTML

É possível utilizar JS normalmente quando dentro de {}, no entanto deve-se tomar cuidado com os valores de atributos chamados por variáveis(props), não é preciso colocar as aspas no atributo;

Componentes são, na maioria das vezes, criados em uma pasta chamada 'components', com o nome da função que aquele componente executa. Sendo necessário importação e exportação;

Props: Propriedades. Podem ser funções, atributos, váriaveis.

EVENTOS

onclick="" = onClick={() => {PROPS}}

state: variáveis que podem ter seus valores originais alterados.

Exercício de formulário

const App = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const nameInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    setName( event.target.value )
  }
  const emailInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    setEmail( event.target.value )
  }
  const passwordInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPassword( event.target.value )
  }
return (
    Nome: <input type="text" value={name} onChange={nameInput} placeholder="Nome" /> <br />
    Email: <input type="email" value={email} onChange={emailInput} placeholder="email" required/> <br />
    Senha: <input type="password" value={password} onChange={passwordInput} placeholder="senha" /> <br />
    <hr />
    Seu nome é: {name} <br />
    Seu email é: {email} <br />
    Sua senha é: {password} <br />
    <input type="button" value="Botão" />
    );
}

Comunicação entre componentes
/App
import { Botao } from "./components/Botão";

const App = () => {

  const handleButton = (txt: string) => {
    alert("Frase do App " + txt);
  }

  return (
    <div>
      <Botao text="clicar no botão" clickFn={handleButton}/>
    </div>
  );
}
  
export default App;

/Botão

type Props = {
    text: string;
    clickFn: (txt: string) => void;
}

export const Botao = ({text, clickFn}: Props) => {

    const handleClick = () => {
        clickFn("FRASE");
    }

    return (
        <button onClick={handleClick}>{text}</button>
    )
}

Renderizar listas

import { Pessoa } from "./components/Pessoa";

const App = () => {

  const listas = [
   {name:'Miguel', age: 45},
   {name:'Matheus', age: 90},
   {name:'Gabriel', age: 20},
   {name:'Fulano', age: 50},
   {name:'Ciclano', age: 12}
  ];

  return (
    <div>
      <ul>
        {listas.map((item, index)=> (
          <Pessoa key={index} data={item} /> 
        ))}
      </ul>
    </div>
  );
}
  
export default App;

/Pessoa


Sobre estilização inLine: atributo de React, funciona que nem um Props, mas dentro há um objeto e não uma funcão, além dos nomes de CSS só poderem ser juntas no estilo de escrita JS, ou seja,
style={{ backgroundColor: '#F00', color: '#FFF' }}


Sobre styled-components: 
Instalação: npm i styled-components;
            npm i -D @types/styled-components; (para instalar TS)

Exercício mudar cor de Container com styled-components e props
//App.tsx
import { useState } from 'react';
import * as C from './AppStyles';

const App = () => {
  const [color, setColor] = useState(true);
  const handleClick = () => {
    setColor(!color);
  }

  return (
    <C.Container bgColor={color}>
      texto do componente.
      <C.Botao onClick={handleClick} bg="#FF0000">Botão grande</C.Botao>
      <C.Botao bg="#00FF00" small>Botão pequeno</C.Botao>
    </C.Container>
  );
}
  
export default App;

//AppStyles.ts
import styled from 'styled-components';

type ContainerProps = {
  bgColor: boolean;
}
export const Container = styled.div<ContainerProps>`
  background-color: ${(props) => props.bgColor ? '#00ff00' : '#FF0000'};
  color: white;
  padding: 20px;
`; 

type BotaoProps = {
  bg: string;
  small?: boolean;
}
export const Botao = styled.button<BotaoProps>`
  font-size: ${(props) => props.small ? '15px' : '30px'};
  background-color: ${props => props.bg};
`;

Backend com React:

import { useState } from "react";
type Movie = {
    titulo: string;
    avatar: string;
}

const App = () => {
  const [movies, setMovies] = useState<Movie[]>([]);

  const loadMovies = () =>{
    fetch('https://api.b7web.com.br/cinema/')
    .then((response) => {
      return response.json();
    })
    .then((json)=>{
      setMovies(json);
    })
  }

  return (
    <div>
      <button className="block bg-blue-400 p-2 rounded" onClick={loadMovies}>Carregar Filmes</button>

      Total de Filmes: {movies.length}
      <div className="grid grid-cols-6 gap-3">
        {movies.map((item, index)=>(
          <div key={index}>
            <img src={item.avatar} className="w-32 block" />
            {item.titulo}
          </div>
        ))}
      </div>
    </div>
  );
}
  
export default App;